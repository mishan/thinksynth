$Id: README.JACK,v 1.2 2004/09/10 17:54:38 joshk Exp $

A quick guide to getting JACK to work with Thinksynth
-----------------------------------------------------

JACK is a portable interface usable by much more than just Linux to connect
together sound/hardware inputs and outputs. This may seem daunting to someone
who seeks only to plunk on a keyboard, so this guide is meant to help people
get jackd up and running.

NB. You may also use the ALSA output backend of Thinksynth, if you use it to
    drive your sound card. Simply running "thinksynth -d alsa" might work.

Installing JACK
---------------

* Debian packages can be found in the sarge or sid (testing or unstable)
  distribution as 'jackd'.

* FreeBSD has the 'audio/jack' port.

* Gentoo has the media-sound / jack ebuild.

* Mandrake, Conectiva, and SuSE all have jack packages in their official
  distribution.

* Slackware 9.1 has a 'jack' package.

* Red Hat/Fedora do not have a JACK package but you can build one from the
  spec file in the source directory. You can download the source at
  http://jackit.sourceforge.net. A howto for building / installing it
  is beyond the scope of this document.

Running JACK
------------

If you use OSS:

	$ jackd -d oss

should do it, then

	$ thinksynth &
	$ jack_connect thinksynth:out_1 oss:playback_1
	$ jack_connect thinksynth:out_2 oss:playback_2

should start getting audio through from Thinksynth to the OSS output.
If you don't have a jack_connect program try qjackctl, which is very
self-intuitive: all you have to do is hit Connect, and connect 'thinksynth'
to 'oss' or 'alsa_pcm'. (If you have 'alsa_pcm' and doing this results in no
sound, see below for why.)

If you use ALSA:

	$ jackd -d alsa

will start JACK, then

	$ thinksynth &
	$ jack_connect thinksynth:out_1 alsa_pcm:playback_1
	$ jack_connect thinksynth:out_2 alsa_pcm:playback_2

should connect Thinksynth to ALSA output. Some weird sound cards will only work
if you connect thinksynth to playback_3 and playback_4, so if you still hear
nothing, give that a try first.

All done!
